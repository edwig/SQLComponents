RELEASENOTES SQLCOMPONENTS VERSION 2.3
======================================
===== Released since: 06-09-2023 =====
======================================

Version 2.3.1 of 18-01-2024
---------------------------
1)  You can now use named parameters in the call to SQLQuery.DoODBCCall
    to call a stored procedure or function.
    This works at least in the Oracle and SQL-Server RDBMS'es
    For an example see the unittest in "TestCalling::TestNamedParameters"
    Even return values from a stored procedure are possible.
2)  Added the possiblity to get a 'SELECT FOR UPDATE' lock on a record
    For correct use: there are two extra SQLInfoDB methods:
    - GetSelectForUpdateTableClause(unsigned p_lockWaitTime) const;
    - GetSelectForUpdateTrailer(XString p_select,unsigned p_lockWaitTime) const;
    These are used in the 'Open' method of the SQLDataSet.
    When generating your own SQL: Refer to te uses of these
    The first is used for an extra clause in the 'FROM <table>' part
    The second is used on the total sql string!
3)  The method "SQLInterval::AsDatabaseDouble()" (returning double) has been replaced
    by a new method "SQLInterval::AsDatabaseNumber()" which now in its turn returns
    a 'bcd' number. Please adjust your application accordingly
4)  In the "SQLInterval" class the method 'double AsDatabaseDouble()' 
    is replaced by 'bcd AsDatabaseNumber()'
5)  In the "VariantFormat" class a number of methods have changed and added. These are:
    - 'SetCurrentDate has been renamed to 'SetCurrentDateAndTime'
    - 'StrValutaNLOmzetten' has been renamed to 'RemoveValutaEuro'
    - 'StrValutaAMOmzetten' has been renamed to 'RemoveValutaDollar'
    - 'double StringDoubleValue' has been changed to 'bcd StringDecimalValue'
    - There is a new method to format the variant as an interval constant named
      'XString FormatVariantAsInterval(SQLDatabase*)'

Version 2.3.0 of 06-09-2023
---------------------------
1)  Library is now fully Unicode compliant
2)  Can be compiled in MBCS or in Unicode text mode
    Beware that you write all of your string literals with the _T("") macro
    Beware that you use the "_t" variants of the C standard library functions
    so use e.g. "_ttoi(i)" instead of "atoi(i)"
3)  Most uses of "const char*" are now mitigated to LPCTSTR
    Most uses of "char" are mitigated to TCHAR
    Most uses of "unsigned char" are mitigated to _TUCHAR
    BUT NOT ALL: Be aware of various buffers in this library!
3)  The SQLVariant type has been extended with the "SQL_C_WCHAR" type
    And various constructors and SetParameter methods have been extended
    with the "bool p_wide = false" parameter to give you the ability to write
    code to enter / bind a XString with a Unicode string to a database column
4)  The BasicExcel and BasicXmlExcel classes have been expanded to be able to
    handle spreadsheet files in Unicode compilation mode.
    Internal XML sheets are converted from UTF-8 to internal strings before handling
5)  Handle the "SQLQuery.SetParameter" calls in your code with care!
    For the XString and LPCTSTR variants, the extra 'p_wide' parameter comes BEFORE
    the optional parameter for the type.
